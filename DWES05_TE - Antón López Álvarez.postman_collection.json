{
	"info": {
		"_postman_id": "946c78f4-4a82-4d78-94c6-1ca8606fc845",
		"name": "DWES05_TE - Ant√≥n L√≥pez √Ålvarez",
		"description": "Este fichero contiene las consultas para llevar a cabo las operaciones CRUD definidas en la TE anterior, en una aplicaci√≥n de gesti√≥n de una colecci√≥n de discos, pero adaptadas al framework Laravel.\n\nOperaciones disponibles\n\n1. **Obtener todos los √≠tems**: Devolver√° la lista completa con la informaci√≥n de cada disco.\n    \n2. **Consultar un √≠tem por su ID**: Devolver√° la informaci√≥n del √≠tem solicitado.\n    \n3. **Obtener √≠tems de un artista**: Recibir√°s todos los √≠tems de un artista concreto.\n    \n4. **Obtener √≠tems de un formato**: Devolver√° todos los √≠tems que se correspondan con el formato enviado.\n    \n5. **Ordenar √≠tems**: Devolver√° todos los √≠tems ordenados por la columna dada, y en el orden solicitado (ascendente o descendente).\n    \n6. **Crear un nuevo √≠tem**: A√±adir√° un nuevo √≠tem a la colecci√≥n.\n    \n7. **Modificar un √≠tem existente**: Actualiza los datos recibidos en el item correspondiente.\n    \n8. **Eliminar un √≠tem**: Elimina un post de la colecci√≥n.\n    \n\nCada operaci√≥n de esta plantilla cuenta con instrucciones detalladas para enviar las peticiones.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39905534"
	},
	"item": [
		{
			"name": "1: Obtener todos los √çtems",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost/lopez_alvarez_anton_DWES05_TE01/coleccionMusical/public/api/item",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"lopez_alvarez_anton_DWES05_TE01",
						"coleccionMusical",
						"public",
						"api",
						"item"
					]
				},
				"description": "Esta solicitud GET obtiene una lista de todos los √≠tems de la colecci√≥n musical.\n\n**Caso de uso:** Al pulsar enviar deber√≠a devolver la informaci√≥n de todos los √≠tems de la colecci√≥n.\n\nEn caso de √©xito devuelve el listado completo de √≠tems. En caso contrario devuelve el error generado."
			},
			"response": []
		},
		{
			"name": "2: Obtener un √≠tem por ID",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost/lopez_alvarez_anton_DWES05_TE01/coleccionMusical/public/api/item/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"lopez_alvarez_anton_DWES05_TE01",
						"coleccionMusical",
						"public",
						"api",
						"item",
						"1"
					]
				},
				"description": "Esta solicitud GET obtiene un √≠tem espec√≠fico basado en su ID.\n\n**Caso de uso:** Si se cambia el valor de `10` en la URL al ID del √≠tem que quieres consultar, deber√≠a devolver los detalles de ese √≠tem en concreto.\n\nEn caso de √©xito devuelve el √≠tem correspondiente. En caso contrario devuelve el error generado."
			},
			"response": []
		},
		{
			"name": "3: Obtener los √≠tems de un Artista",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost/lopez_alvarez_anton_DWES05_TE01/coleccionMusical/public/api/item/artist/{{artist}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"lopez_alvarez_anton_DWES05_TE01",
						"coleccionMusical",
						"public",
						"api",
						"item",
						"artist",
						"{{artist}}"
					]
				},
				"description": "Esta solicitud GET obtiene todos los √≠tem de un artista espec√≠fico basado en su nombre.\n\n**Caso de uso:** Si se cambia el valor de `the-who` en la URL por el nombre del artista que queramos buscar, devolver√° todos los √≠tems que est√©n a nombre de ese artista. Puedes usar min√∫sculas y may√∫sculas indistintamente, es _case insensitive_.\n\nüëÅÔ∏è **¬°OJO!** Muchos nombres de artistas contienen espacios, para poder consultarlos tendr√°s que sustituir esos espacios por guiones. Ejemplo: si quieres buscar a _The Who_, puedes escribir _The-Who_, _the-who_, etc.\n\nEn caso de √©xito devuelve el listado de √≠tems correspondiente. En caso no √©xito devuelve el error generado."
			},
			"response": []
		},
		{
			"name": "4: Obtener los √≠tems de un Formato",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost/lopez_alvarez_anton_DWES05_TE01/coleccionMusical/public/api/item/format/{{format}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"lopez_alvarez_anton_DWES05_TE01",
						"coleccionMusical",
						"public",
						"api",
						"item",
						"format",
						"{{format}}"
					]
				},
				"description": "Esta solicitud GET obtiene todos los √≠tem que est√°n en un formato determinado, a partir del nombre de dicho formato.\n\n**Caso de uso:** Si se cambia el valor de `CD` en la URL por el nombre del formato que queramos buscar, devolver√° todos los √≠tems que est√©n en ese formato. Tambi√©n es _case insensitive_.\n\nEn caso de √©xito devuelve el listado de √≠tems correspondiente. En caso no √©xito devuelve el error generado."
			},
			"response": []
		},
		{
			"name": "5: Obtener todos los √≠tems ordenados",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost/lopez_alvarez_anton_DWES05_TE01/coleccionMusical/public/api/item/order/{{key}}/{{order}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"lopez_alvarez_anton_DWES05_TE01",
						"coleccionMusical",
						"public",
						"api",
						"item",
						"order",
						"{{key}}",
						"{{order}}"
					]
				},
				"description": "Esta solicitud GET obtiene todos los √≠tem ordenados por una clave dada. Este orden que puede ser ascendente o descendente.\n\n**Caso de uso:** Pon el nombre de una de las columnas de la tabla √≠tems en lugar de `{{key}}` y _asc_ o _desc_ en lugar de `{{order}}`. La aplicaci√≥n devolver√° todos los √≠tems ordenados seg√∫n ese criterio.\n\nüëÅÔ∏è ¬°OJO! Las claves son _case sensitive_. El orden (`asc` o `desc`) es _case insensitive_.\n\nEn caso de √©xito devuelve todos los √≠tems. En caso no √©xito devuelve el error generado.\n\nLista de las columnas disponibles para ordenar es: `id`, `title`, `artist`, `format`, `year`, `origYear`, `label`, `rating`, `comment`, `buyPrice`, `condition`, `sellPrice`.\n\nüëÅÔ∏è ¬°OJO! Ten en cuenta que no se puede ordenar por la clave `externalIds`, ya que es un array."
			},
			"response": []
		},
		{
			"name": "6: Crear un nuevo √≠tem",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"title\":\"Through the Looking Glass\",\n  \"artist\":\"Midori Takada\",\n  \"format\":\"CD\",\n  \"year\": 2017,\n  \"origYear\": 1983,\n  \"label\":\"WRWTFWW Records\",\n  \"rating\": 9,\n  \"comment\":\"Reedici√≥n suiza con descarga digital. Muy bueno.\",\n  \"buyPrice\": 20,\n  \"condition\":\"NM\",\n  \"sellPrice\": 28,\n  \"externalIds\":{\n    \"Discogs\":\"9975883\",\n    \"Musicbrainz\":\"76dccf5b-c8b0-44b1-93a8-fb739a066bc4\"\n  }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost/lopez_alvarez_anton_DWES05_TE01/coleccionMusical/public/api/item",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"lopez_alvarez_anton_DWES05_TE01",
						"coleccionMusical",
						"public",
						"api",
						"item"
					]
				},
				"description": "Esta solicitud POST crea un nuevo √≠tem en la colecci√≥n musical.\n\n**Caso de uso:** En el cuerpo de la solicitud se incluir√° un JSON con todos los campos del √≠tem a crear, a excepci√≥n del ID, que lo generar√° la base de datos: `title`, `artist`, `format`, `year`, `origYear`, `label`, `rating`, `comment`, `buyPrice`, `condition`, `sellPrice`, `externalIds`.\n\nüëÅÔ∏è ¬°OJO! Para que se validen los datos se debe cumplir lo siguiente\n\n- Los campos year y originalYear deben estar entre 1901 y 2155 (tipo YEAR(4))\n    \n- El campo rating debe ser un entero entre 1 y 10 (incluidos)\n- Los campos buyPrice y sellPrice son numeros mayores o iguales que cero\n- El campo condition debe contener un valor de la Goldmine Grading Guide (M, NM, E, VG, G, P)\n    \n\nEn caso de √©xito devuelve el √≠tem creado. En caso no √©xito devuelve el error generado."
			},
			"response": []
		},
		{
			"name": "7: Modificar un √≠tem",
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"format\": \"3CD\",\n    \"year\": 2019,\n    \"origYear\": 1982,\n    \"externalIds\": {\n        \"Discogs\": \"25\",\n        \"Musicbrainz\": \"50\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost/lopez_alvarez_anton_DWES05_TE01/coleccionMusical/public/api/item/{{id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"lopez_alvarez_anton_DWES05_TE01",
						"coleccionMusical",
						"public",
						"api",
						"item",
						"{{id}}"
					]
				},
				"description": "Esta solicitud PUT actualiza un item en la base de datos bas√°ndose en su ID.\n\n**Caso de uso:** Si se cambia el valor de `id` al ID del √≠tem que se quiera actualizar, editando los nombres de las claves que queramos modificar (pueden ser todas o solo algunas) y sus valores en el cuerpo de la solicitud con los valores nuevos, se modificar√° el contenido de ese √≠tem.\n\nüëÅÔ∏è ¬°OJO!\n\n- No se puede modificar el campo de ID, y el valor de este debe existir en la tabla\n- Los campos year y originalYear deben ser enteros entre 1901 y 2155\n- El campo rating debe ser un entero entre 1 y 10 (incluidos)\n- Los campos buyPrice y sellPrice deben ser num√©ricos mayores o iguales que cero\n- El campo condition debe contener un valor de la Goldmine Grading Guide (M, NM, E, VG, G, P)\n    \n\nEn caso de √©xito devuelve el √≠tem actualizado. En caso no √©xito devuelve el error generado."
			},
			"response": []
		},
		{
			"name": "8: Eliminar un √≠tem por su ID",
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 14\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost/lopez_alvarez_anton_DWES05_TE01/coleccionMusical/public/api/item",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"lopez_alvarez_anton_DWES05_TE01",
						"coleccionMusical",
						"public",
						"api",
						"item"
					]
				},
				"description": "Esta solicitud DELETE elimina un √≠tem de la colecci√≥n a partir de su ID.\n\n**Caso de uso:** Si se cambia el valor de `id` al ID del √≠tem que se quiera eliminar, este se eliminar√≠a de la colecci√≥n al recibir y procesar la solicitud.\n\nEn caso de √©xito devuelve el √≠tem eliminado. En caso no √©xito devuelve el error generado."
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "10",
			"type": "string"
		},
		{
			"key": "artist",
			"value": "the-who",
			"type": "string"
		},
		{
			"key": "format",
			"value": "CD",
			"type": "string"
		},
		{
			"key": "key",
			"value": "buyPrice",
			"type": "string"
		},
		{
			"key": "order",
			"value": "DESC",
			"type": "string"
		}
	]
}